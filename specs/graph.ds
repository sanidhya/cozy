Graph:
    handletype Node = { id : Int }
    handletype Edge = { src : Int, dst : Int }

    state nodes : Bag<Node>
    state edges : Bag<Edge>

    // Invariant: disallow self-edges.
    invariant (sum [ 1 | e <- edges, e.val.src == e.val.dst ]) == 0;

    op addNode(n : Node)
        nodes.add(n);

    op addEdge(e : Edge)
        assume e.val.src != e.val.dst;
        edges.add(e);

//    query outgoing(nodeId : Int)
//        [ e | e <- edges, e.val.src == nodeId ]
//
//    query incoming(nodeId : Int)
//        [ e | e <- edges, e.val.dst == nodeId ]

    query out_degree(nodeId : Int)
        sum [ 1 | e <- edges, e.val.src == nodeId ]

//    query degree(nodeId : Int)
//        sum [ 1 | e <- edges, e.val.src == nodeId or e.val.dst == nodeId ]

//    query neighbors(n : Node)
//        [ m | e <- edges, m <- nodes, e.val.src == n.id and e.val.dst == m.val.id ]
